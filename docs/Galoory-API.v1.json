{
  "openapi": "3.0.0",
  "info": {
    "title": "Galoory API",
    "version": "1.0",
    "contact": {
      "name": "Neil Richter",
      "url": "https://nook.sh",
      "email": "me@neilrichter.com"
    },
    "description": "API Documentation for Galoory API. Galoory is a service that allow a photographer's customers to select a sample of pictures they want to buy in their package."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "summary": "Register user",
        "operationId": "post-users",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "Example missing fields": {
                    "value": {
                      "message": "Missing field \"password\""
                    }
                  },
                  "Example too short password": {
                    "value": {
                      "message": "The password must be at least 8 characters long"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "Example email already exists": {
                    "value": {
                      "message": "Email already in use"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstname": {
                    "type": "string"
                  },
                  "lastname": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "format": "password"
                  }
                },
                "required": [
                  "firstname",
                  "lastname",
                  "email",
                  "password"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "email": "me@neilrichter.com",
                    "firstname": "Neil",
                    "lastname": "Richter",
                    "password": "password"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Login",
        "operationId": "post-login",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1OTcwMDcwMDksImV4cCI6MTU5NzAxMDYwOSwicm9sZXMiOlsiUk9MRV9VU0VSIl0sInVzZXJuYW1lIjoibWVAbmVpbHJpY2h0ZXIuY29tIn0.Ar6BpPtNAjfmAJnyRAz6RVyce3NZB6zEQFUPapPlQ3X0YKFMu7lUzKOSnww1mB5xkhEXvcHp0utQ3HlPS2fpyI0Yw1jNP63pUVy--eFIuapqtTYCHGlnCQ7FKHb1G1-N48NWIVx2nu_8Pt0EgiE64RLRtFREbNVCGkKgPAKAe9SMafXzqYDFA3Grc-TC8NySvbgH14wg71YT492XuA0y6nFoSq5M8jVVg5WdgLNVVWz6NDMrRvxshTICY97XWkyWch13s4a1AwJ1oNx6rON5-EuK8L8SpnvReAizjNotqMfc6WdsijqqXKvyGPpPkHWJs4jSQCXqoVDW3Wo-Fvwy8yq0WARoc5vC6XOv1VwoUsOSGYJZlblzaqg12GJRgf0ju_saODNMXjmqF5I7-eCFsVTFiHUTUJyQKV316KzqxXN_yOoRfZMGPmDYd2haOPox-LB26fED7rqxtUNmymom5CzEIzei3cGz641z1DAKOgoE1HCp5Pvq-MnBTjkc9VzgJIxto2PeWOauD7-qkxAqwvq445Zw7XjtvpXuAsEZltBx0RrDkFwELidNNsXdI7_JqktaaZ1VDpd3vSPSRCtEacpsnPDr49E4RPuEvtEcXTTc2khpihMXrjpfHdoPYW5opt35Yg7WePUX7K_EZdJAM1jaZDr4vVZKQrwK5Gk1-LQ"
                    }
                  }
                },
                "examples": {
                  "Auth success": {
                    "value": {
                      "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1OTcwMDcwMDksImV4cCI6MTU5NzAxMDYwOSwicm9sZXMiOlsiUk9MRV9VU0VSIl0sInVzZXJuYW1lIjoibWVAbmVpbHJpY2h0ZXIuY29tIn0.Ar6BpPtNAjfmAJnyRAz6RVyce3NZB6zEQFUPapPlQ3X0YKFMu7lUzKOSnww1mB5xkhEXvcHp0utQ3HlPS2fpyI0Yw1jNP63pUVy--eFIuapqtTYCHGlnCQ7FKHb1G1-N48NWIVx2nu_8Pt0EgiE64RLRtFREbNVCGkKgPAKAe9SMafXzqYDFA3Grc-TC8NySvbgH14wg71YT492XuA0y6nFoSq5M8jVVg5WdgLNVVWz6NDMrRvxshTICY97XWkyWch13s4a1AwJ1oNx6rON5-EuK8L8SpnvReAizjNotqMfc6WdsijqqXKvyGPpPkHWJs4jSQCXqoVDW3Wo-Fvwy8yq0WARoc5vC6XOv1VwoUsOSGYJZlblzaqg12GJRgf0ju_saODNMXjmqF5I7-eCFsVTFiHUTUJyQKV316KzqxXN_yOoRfZMGPmDYd2haOPox-LB26fED7rqxtUNmymom5CzEIzei3cGz641z1DAKOgoE1HCp5Pvq-MnBTjkc9VzgJIxto2PeWOauD7-qkxAqwvq445Zw7XjtvpXuAsEZltBx0RrDkFwELidNNsXdI7_JqktaaZ1VDpd3vSPSRCtEacpsnPDr49E4RPuEvtEcXTTc2khpihMXrjpfHdoPYW5opt35Yg7WePUX7K_EZdJAM1jaZDr4vVZKQrwK5Gk1-LQ"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "enum": [
                        401
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "Auth failure - Invalid credentials": {
                    "value": {
                      "code": 401,
                      "message": "Invalid credentials."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns a JSON Web Token in exchange for valid credentials",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/photo-package": {
      "get": {
        "summary": "List Photo Packages",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhotoPackage"
                  }
                },
                "examples": {
                  "Photo package list": {
                    "value": [
                      {
                        "id": "f9631aef-3d9b-4f90-9234-ab9140a69822",
                        "name": "DÃ©couverte",
                        "quantity": 6
                      },
                      {
                        "id": "af330c0a-39cb-4433-879e-1cb40ed470d5",
                        "name": "Avantage",
                        "quantity": 10
                      },
                      {
                        "id": "fd6c6a60-94e3-4dc2-a9d4-62b04a1b912c",
                        "name": "Duo",
                        "quantity": 15
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "operationId": "get-photo-package",
        "description": "Lists Photo packages"
      }
    },
    "/photoshoot": {
      "get": {
        "summary": "List Photoshoots",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Photoshoot"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-photoshoot",
        "description": "Lists all photoshoots for an admin user."
      },
      "post": {
        "summary": "New Photoshoot",
        "operationId": "post-photoshoot",
        "responses": {
          "201": {
            "description": "Created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Photoshoot"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid value \"%s\" for field \"user\""
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email already in use"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": [
                      "string",
                      "object"
                    ],
                    "format": "uuid",
                    "required": [
                      "email",
                      "firstname",
                      "lastname"
                    ],
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "firstname": {
                        "type": "string"
                      },
                      "lastname": {
                        "type": "string"
                      }
                    }
                  },
                  "expiration": {
                    "type": "string",
                    "format": "date"
                  },
                  "package": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "required": [
                  "user",
                  "expiration",
                  "package"
                ]
              },
              "examples": {
                "Example new user": {
                  "value": {
                    "user": {
                      "email": "<email>",
                      "firstname": "<string>",
                      "lastname": "<string>"
                    },
                    "package": "<uuid>",
                    "expiration": "<date>"
                  }
                },
                "Example existing user": {
                  "value": {
                    "user": "<uuid>",
                    "package": "<uuid>",
                    "expiration": "<date>"
                  }
                }
              }
            }
          },
          "description": "User can either be a uuid to link to an existing user, or a new user object."
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User",
        "type": "object",
        "x-examples": {
          "Example": {
            "id": "73041b27-7ddf-4e04-ba44-4282506edf9a",
            "email": "me@neilrichter.com",
            "roles": [
              "ROLE_USER"
            ],
            "firstname": "Neil",
            "lastname": "Richter"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "roles": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "type": "string",
              "example": "[\"ROLE_USER\"]",
              "enum": [
                "ROLE_USER",
                "ROLE_ADMIN"
              ],
              "default": "[\"ROLE_USER\"]"
            }
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          }
        },
        "description": "Represents a user which you authenticate as to perform actions."
      },
      "PhotoPackage": {
        "title": "PhotoPackage",
        "type": "object",
        "x-examples": {
          "Photo Package": {
            "id": "f9631aef-3d9b-4f90-9234-ab9140a69822",
            "name": "DÃ©couverte",
            "quantity": 6
          }
        },
        "description": "Represents a photo package that describes how any pictures a customer can select for a selected package.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "f9631aef-3d9b-4f90-9234-ab9140a69822"
          },
          "": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "",
          "quantity"
        ]
      },
      "Photoshoot": {
        "title": "Photoshoot",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "93b04902-9d39-41aa-a3e8-ab2002455019"
          },
          "customer": {
            "$ref": "#/components/schemas/User"
          },
          "expiration": {
            "type": "string",
            "format": "date",
            "example": "2020-08-12T00:00:00+00:00"
          },
          "status": {
            "$ref": "#/components/schemas/PhotoshootStatus"
          },
          "package": {
            "$ref": "#/components/schemas/PhotoPackage"
          }
        },
        "required": [
          "id",
          "customer",
          "expiration",
          "status",
          "package"
        ]
      },
      "PhotoshootStatus": {
        "type": "string",
        "title": "PhotoshootStatus",
        "enum": [
          "pending"
        ]
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "Authorization": []
    }
  ]
}